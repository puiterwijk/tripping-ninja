#!/usr/bin/env python
import sys
from argparse import ArgumentParser
from subprocess import Popen, PIPE, STDOUT
from shlex import split

pre_code = '''#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

int tape_len = 1;
int tape_pos = 0;
int *tape = NULL;

void main(int argc, char **argv)
{
    if(argc > 1 && ((strcmp(argv[1], "-h") == 0) || (strcmp(argv[1], "--help") == 0)))
    {
        printf("Compiled Enhanced Brainfuck program. Use -t for tape output\\n");
        exit(0);
    };
    tape = malloc(sizeof(int));
    '''

post_code = '''
    if(argc > 1 && ((strcmp(argv[1], "-t") == 0) || (strcmp(argv[1], "--tape") == 0)))
    {
        printf("\\nTape: [");
        int i;
        for(i = 0; i < tape_len; i++)
        {   
            printf("%d, ", tape[i]);
        }   
        printf("]\\n");
    }
}'''

def krijg_getal():
    gekregen = None
    while not gekregen:
        try:
            gekregen = int(sys.stdin.read(1))
        except:
            pass
    return gekregen

def executeer(prog, prog_pos, terug_stap, tape, tape_pos):
    output = ""
    while True:
        assert tape_pos >= 0
        while len(tape) <= tape_pos:
            tape = tape + [0]
        if prog_pos >= len(prog):
            return output, tape, tape_pos
        command = prog[prog_pos]
        prog_pos += 1
        if command == '+':
            tape[tape_pos] += 1
        elif command == '-':
            tape[tape_pos] -= 1
        elif command == '<':
            tape_pos -= 1
        elif command == '>':
            tape_pos += 1
        elif command == ',':
            #tape[tape_pos] = int(input[0])
            #input = input[1:]
            tape[tape_pos] = krijg_getal()
        elif command == '.':
            output = output + str(tape[tape_pos])
        elif command == '[':
            if tape[tape_pos] == 0:
                # skip to corresponding ]
                depth = 1
                while depth != 0:
                    if prog[prog_pos] == ']':
                        depth -= 1
                    elif prog[prog_pos] == '[':
                        depth += 1
                    prog_pos += 1
            else:
                terug_stap = [prog_pos-1] + terug_stap
        elif command == ']':
            prog_pos = terug_stap[0]
            terug_stap = terug_stap[1:]

def replace_function(programma, name, args, code):
    eerste = programma.find(name + "(")
    if eerste == -1:
        return programma
    laatste = eerste + len(name) + 1
    depth = 1
    argvals = []
    argval = ""
    while depth != 0:
        if programma[laatste] == ')':
            depth -= 1
        elif programma[laatste] == '(':
            depth += 1
        if programma[laatste] == ',' and depth == 1:
            argvals.append(argval)
            argval = ""
        elif depth != 0:
            argval += programma[laatste]
        laatste += 1
    argvals.append(argval)
    if len(args) == 0 and len(argvals) == 1:
        argvals = []
    assert len(args) == len(argvals)
    zoek = programma[eerste:(laatste)]
    i = 0
    while i < len(args):
        code = code.replace(args[i], argvals[i])
        i += 1
    return programma.replace(zoek, code)

def replace_functions(programma, functions):
    functions = functions.replace("\n", "")
    functions = functions.split("----")
    funcs = []
    for function in functions:
        function = function.split('====')
        if len(function) == 2:
            name_with_func = function[0].split('\n')[0]
            code = function[1]
            func_start = name_with_func.find('(')
            func_end = name_with_func.find(')')
            assert func_start != -1
            assert func_end != -1
            name = name_with_func[:func_start]
            args = name_with_func[(func_start+1):func_end].split(",")
            name = name.replace(" ", "")
            if name != "":
                funcs.append({'name': name, 'args': args, 'code': code})
    replaced = True
    while replaced:
        prog_old = programma
        for func in funcs:
            programma = replace_function(programma, func['name'], func['args'], func['code'])
        replaced = prog_old != programma
    return programma

def optimize(programma):
    replaced = True
    while replaced:
        prog_old = programma
        programma = programma.replace("><", "")
        programma = programma.replace("<>", "")
        programma = programma.replace("+-", "")
        programma = programma.replace("-+", "")
        for char in programma:
            if not char in ['+', '-', '<', '>', '.', ',', '[', ']']:
                programma = programma.replace(char, "")
        replaced = prog_old != programma
    return programma

def compileer(programma):
    nieuw = pre_code
    for char in programma:
        if char == '-':
            nieuw += 'tape[tape_pos]--;'
        elif char == '+':
            nieuw += 'tape[tape_pos]++;'
        elif char == '<':
            nieuw += 'tape_pos--; assert(tape_pos >= 0);'
        elif char == '>':
            nieuw += 'tape_pos++; if(tape_pos >= tape_len){tape = realloc(tape, sizeof(int) * tape_pos); tape_len++;};'
        elif char == '[':
            nieuw += 'while(tape[tape_pos]){'
        elif char == ']':
            nieuw += '};'
        elif char == ',':
            nieuw += 'tape[tape_pos] = fgetc(stdin)-48;'
        elif char == '.':
            nieuw += 'printf("%d", tape[tape_pos]);'
    nieuw += post_code
    return nieuw

def compileer_c(programma, cc='gcc'):
    return Popen(split('gcc -xc -o /dev/stdout -'), stdout=PIPE, stdin=PIPE).communicate(input=programma)[0]

def run(input, output, no_optimize, no_compile, no_assemble, interpret, print_tape):
    if output == None:
        if no_compile or no_assemble or interpret:
            output = '-'
        else:
            output = 'a.out'
    inputf = file(input)
    inputr = inputf.read().split("////")
    if output == '-':
        outputf = sys.stdout
    else:
        outputf = file(output, 'w')
    functions = ""
    programma = ""
    if len(input) == 1:
        programma = inputr[0]
    else:
        functions = inputr[0]
        programma = inputr[1]
    inputf.close()
    programma = replace_functions(programma, functions)
    if programma.find('(') != -1:
        print 'There may have been used undefined functions: %s' % programma
    if not no_optimize:
        programma = optimize(programma)
    if interpret:
        # Interpret
        output, tape, tape_pos = executeer(programma, 0, [], [0], 0)
        outputf.write(output)
        if print_tape:
            outputf.write("\n")
            outputf.write("Tape: [")
            for char in tape:
                outputf.write("%d, " % char)
            outputf.write("]\n")
    else:
        # Compile/assemble
        if not no_compile:
            programma = compileer(programma)
            if not no_assemble:
                programma = compileer_c(programma)
        outputf.write(programma)
    outputf.close()

def parse_args():
    parser = ArgumentParser(description='Compile Enhanced BrainF*ck')
    parser.add_argument('input', help='The input file')
    parser.add_argument('-o', '--output', help='Output file name')
    parser.add_argument('-no', '--no-optimize', help='Disable BF optimization', action='store_true')
    parser.add_argument('-nc', '--no-compile', help='Do not compile to C', action='store_true')
    parser.add_argument('-na', '--no-assemble', help='Do not compile to machine code', action='store_true')
    parser.add_argument('-i', '--interpret', help='Interpret in python instead of compile', action='store_true')
    parser.add_argument('-t', '--tape', help='Show tape if interpreted', action='store_true')
    result = parser.parse_args()
    return result

if __name__ == '__main__':
    args = parse_args()
    run(args.input, args.output, args.no_optimize, args.no_compile, args.no_assemble, args.interpret, args.tape)
